// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { LoginData, LoginResponse, LoginError, LogoutData, LogoutResponse, LogoutError, MeData, MeResponse, MeError, RegisterData, RegisterResponse, RegisterError, VerifyEmailData, VerifyEmailResponse, VerifyEmailError, GetAllUsersData, GetAllUsersResponse, GetAllUsersError, DeleteUserData, DeleteUserResponse, DeleteUserError } from './types.gen';

export const client = createClient(createConfig());

/**
 * Login
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout
 * This endpoint is used to log out a currently authenticated user. It invalidates the user's session or authentication token, ensuring that the token can no longer be used for accessing protected resources. This is a critical security feature to prevent unauthorized access after a user logs out.
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? client).get<LogoutResponse, LogoutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Me
 */
export const me = <ThrowOnError extends boolean = false>(options?: Options<MeData, ThrowOnError>) => {
    return (options?.client ?? client).get<MeResponse, MeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/me',
        ...options
    });
};

/**
 * Register
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
        url: '/api/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify email
 * This endpoint is used to verify a user's email address. When a user registers or updates their email, a verification token is sent to their email address. The user must submit this token through this endpoint to confirm the validity of their email.
 */
export const verifyEmail = <ThrowOnError extends boolean = false>(options?: Options<VerifyEmailData, ThrowOnError>) => {
    return (options?.client ?? client).get<VerifyEmailResponse, VerifyEmailError, ThrowOnError>({
        url: '/api/auth/verify-email',
        ...options
    });
};

/**
 * Get all users
 */
export const getAllUsers = <ThrowOnError extends boolean = false>(options?: Options<GetAllUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllUsersResponse, GetAllUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options
    });
};

/**
 * Delete user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}',
        ...options
    });
};