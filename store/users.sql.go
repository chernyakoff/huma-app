// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
	"huma-app/store/types"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(
    id,
    email,
    password
) VALUES (
    ?, ?, ?
) RETURNING id,email, role
`

type CreateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

type CreateUserRow struct {
	ID    uuid.UUID  `json:"id"`
	Email string     `json:"email"`
	Role  types.Role `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.Role)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, role FROM users WHERE email = ? LIMIT 1
`

type GetUserByEmailRow struct {
	ID       uuid.UUID  `json:"id"`
	Email    string     `json:"email"`
	Password string     `json:"password"`
	Role     types.Role `json:"role"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
;

SELECT id, email, role FROM users WHERE id = ? LIMIT 1
`

type GetUserByIdRow struct {
	ID    uuid.UUID  `json:"id"`
	Email string     `json:"email"`
	Role  types.Role `json:"role"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Email, &i.Role)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, role, created_at FROM users
`

type GetUsersRow struct {
	ID        uuid.UUID  `json:"id"`
	Email     string     `json:"email"`
	Role      types.Role `json:"role"`
	CreatedAt time.Time  `json:"created_at"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET verified = 1 WHERE id = ?
`

func (q *Queries) VerifyUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, verifyUser, id)
	return err
}
